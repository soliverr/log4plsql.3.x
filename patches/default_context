Bottom: 8a2a9902bdd145e314b3a3cb7749a01d57ecc941
Top:    bd287fece5272f369d1e75820c32b0ef66a69c75
Author: sOliverr <soliverr@gmail.com>
Date:   2013-10-24 10:29:49 +0600

Set global dCTX variable as default PLOG context.
It allows use PLOG procedures without pCTX parameter.


---

diff --git a/sql/pblog.sql b/sql/pblog.sql
index 057b141..55f4030 100644
--- a/sql/pblog.sql
+++ b/sql/pblog.sql
@@ -1,5 +1,9 @@
 CREATE OR REPLACE
 PACKAGE BODY         PLOG IS
+
+    dCTX             LOG_CTX;           -- Default context
+    dINIT_LLEVEL     TLOG.LLEVEL%type;  -- Default log level
+
 -------------------------------------------------------------------
 --
 --  Nom package        : PLOG
@@ -356,24 +360,56 @@ RETURN LOG_CTX
 IS
     pCTX       LOG_CTX;                           
 BEGIN
-    
-    pCTX.isDefaultInit   := TRUE;
-    pCTX.LSection        := nvl(pSECTION, calleurname);
-    pCTX.INIT_LSECTION   := pSECTION;
-    pCTX.LLEVEL          := pLEVEL;
-    pCTX.INIT_LLEVEL     := pLEVEL;
-    pCTX.USE_LOG4J       := pLOG4J;
-    pCTX.USE_OUT_TRANS   := pOUT_TRANS;
-    pCTX.USE_LOGTABLE    := pLOGTABLE;
-    pCTX.USE_ALERT       := pALERT;
-    pCTX.USE_TRACE       := pTRACE;
-    pCTX.USE_DBMS_OUTPUT := pDBMS_OUTPUT;
-    pCTX.DBMS_PIPE_NAME  := pDBMS_PIPE_NAME;
-    pCTX.DBMS_OUTPUT_WRAP := pDBMS_OUTPUT_WRAP;
-
-    return pCTX;
+	if dCTX.isDefaultInit = TRUE then
+	    return dCTX;
+	end if;
+
+	-- Get new context
+	pCTX.isDefaultInit   := TRUE;
+	select sid into dCTX.LSID from v$mystat where rownum = 1;
+	pCTX.LSection        := nvl(pSECTION, calleurname);
+	pCTX.INIT_LSECTION   := pSECTION;
+	if dINIT_LLEVEL is not NULL then
+	    pCTX.LLEVEL := dINIT_LLEVEL;
+	    pCTX.INIT_LLEVEL := dINIT_LLEVEL;
+	else
+	    pCTX.LLEVEL      := pLEVEL;
+	    pCTX.INIT_LLEVEL := pLEVEL;
+	end if;
+	pCTX.USE_LOG4J       := pLOG4J;
+	pCTX.USE_OUT_TRANS   := pOUT_TRANS;
+	pCTX.USE_LOGTABLE    := pLOGTABLE;
+	pCTX.USE_ALERT       := pALERT;
+	pCTX.USE_TRACE       := pTRACE;
+	pCTX.USE_DBMS_OUTPUT := pDBMS_OUTPUT;
+	pCTX.DBMS_PIPE_NAME  := pDBMS_PIPE_NAME;
+	pCTX.DBMS_OUTPUT_WRAP := pDBMS_OUTPUT_WRAP;
+
+	return pCTX;
 end init;
 
+-- Store default context in global variable
+procedure setDefaultContext
+(
+    pCTX        IN OUT NOCOPY LOG_CTX                       -- Context
+) IS
+BEGIN
+	dCTX.isDefaultInit    := pCTX.isDefaultInit;
+	select sid into dCTX.LSID from v$mystat where rownum = 1;
+	dCTX.LSection         := pCTX.LSection;
+	dCTX.INIT_LSECTION    := pCTX.INIT_LSECTION;
+	dCTX.LLEVEL           := pCTX.LLEVEL;
+	dCTX.INIT_LLEVEL      := pCTX.INIT_LLEVEL;
+	dCTX.USE_LOG4J        := pCTX.USE_LOG4J;
+	dCTX.USE_OUT_TRANS    := pCTX.USE_OUT_TRANS;
+	dCTX.USE_LOGTABLE     := pCTX.USE_LOGTABLE;
+	dCTX.USE_ALERT        := pCTX.USE_ALERT;
+	dCTX.USE_TRACE        := pCTX.USE_TRACE;
+	dCTX.USE_DBMS_OUTPUT  := pCTX.USE_DBMS_OUTPUT;
+	dCTX.DBMS_PIPE_NAME   := pCTX.DBMS_PIPE_NAME;
+	dCTX.DBMS_OUTPUT_WRAP := pCTX.DBMS_OUTPUT_WRAP;
+end setDefaultContext;
+
 --------------------------------------------------------------------
 PROCEDURE setBeginSection
 -- initialisation d'un debut de niveaux hierarchique de log
@@ -719,11 +755,25 @@ PROCEDURE setLevel
 ) IS
     nbrl number;
 BEGIN
-
     setLevel (pCTX, getTextInLevel(pLEVEL));
-
 end setLevel;
 
+PROCEDURE setLevel
+(
+    pLEVEL        IN TLOG.LLEVEL%type default NOLEVEL           -- Higher level to allot dynamically
+) IS
+    nbrl number;
+BEGIN
+    select count(*) into nbrl FROM TLOGLEVEL where TLOGLEVEL.LLEVEL=pLEVEL;
+    IF nbrl > 0 then
+        dINIT_LLEVEL := pLEVEL;
+    ELSE
+        raise_application_error(-20501, 'SetLevel ('||pLEVEL||') not in TLOGLEVEL table');
+    END IF;
+EXCEPTION
+    WHEN OTHERS THEN
+        PLOG.ERROR;
+end setLevel;
 
 -------------------------------------------------------------------
 FUNCTION getLevel 
@@ -1119,6 +1169,11 @@ END setDBMS_PIPE_NAME;
 
 --------------------------------------------------------------------
 --------------------------------------------------------------------
+
+BEGIN
+    -- Set default context
+    dCTX.isDefaultInit := FALSE;
+    dINIT_LLEVEL := NULL;
 END PLOG;
 /
 
diff --git a/sql/pslog.sql b/sql/pslog.sql
index fa2d347..2fda090 100644
--- a/sql/pslog.sql
+++ b/sql/pslog.sql
@@ -126,18 +126,19 @@ MES_CODE_DBMS_PIPE CONSTANT VARCHAR2(100) := 'error DBMS_PIPE.send_message. retu
 -- Public declaration of package
 -------------------------------------------------------------------
 TYPE LOG_CTX IS RECORD (                     -- Context de log
-    isDefaultInit     BOOLEAN default FALSE ,     
-    LLEVEL            TLOG.LLEVEL%type      ,     
+    isDefaultInit     BOOLEAN default FALSE ,
+    LSID              TLOG.LSID%type        ,
+    LLEVEL            TLOG.LLEVEL%type      ,
     LSECTION          TLOG.LSECTION%type    ,
-    LTEXTE            TLOG.LTEXTE%type      ,              
+    LTEXTE            TLOG.LTEXTE%type      ,
     USE_LOG4J         BOOLEAN               ,
     USE_OUT_TRANS     BOOLEAN               ,
     USE_LOGTABLE      BOOLEAN               ,
     USE_ALERT         BOOLEAN               ,
-    USE_TRACE         BOOLEAN               ,    
-    USE_DBMS_OUTPUT   BOOLEAN               ,     
-    INIT_LSECTION     TLOG.LSECTION%type    ,    
-    INIT_LLEVEL       TLOG.LLEVEL%type      ,   
+    USE_TRACE         BOOLEAN               ,
+    USE_DBMS_OUTPUT   BOOLEAN               ,
+    INIT_LSECTION     TLOG.LSECTION%type    ,
+    INIT_LLEVEL       TLOG.LLEVEL%type      ,
     DBMS_PIPE_NAME    VARCHAR2(255)         ,
 	DBMS_OUTPUT_WRAP  PLS_INTEGER          
 );
@@ -271,7 +272,12 @@ FUNCTION init
 )
 RETURN LOG_CTX;
 
-
+-- Set default context
+--  from init
+procedure setDefaultContext
+(
+    pCTX        IN OUT NOCOPY LOG_CTX                             -- Context
+);
 
 /**
 <B>Sections management</B> : init a new section
@@ -331,6 +337,12 @@ PROCEDURE setLevel
     pLEVEL        IN TLOGLEVEL.LCODE%type                       -- Higher level to allot dynamically
 );
 
+PROCEDURE setLevel
+(
+    pLEVEL        IN TLOG.LLEVEL%type default NOLEVEL           -- Higher level to allot dynamically
+);
+
+
 /**
 <B>Levels Management</B> : Get a current level
 */
